{"traceEvents": [{"ph": "M", "pid": 10110, "tid": 10110, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 10110, "tid": 390948, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 10110, "tid": 390948, "ts": 31503145459.266, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145462.599, "ph": "X", "cat": "fee", "dur": 0.125, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145459.058, "ph": "X", "cat": "fee", "dur": 3.791, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1033)"}, {"pid": 10110, "tid": 390948, "ts": 31503145465.141, "ph": "X", "cat": "fee", "dur": 0.292, "name": "__init__ (<frozen importlib._bootstrap>:152)"}, {"pid": 10110, "tid": 390948, "ts": 31503145466.141, "ph": "X", "cat": "fee", "dur": 0.208, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145467.391, "ph": "X", "cat": "fee", "dur": 2.292, "name": "_thread.allocate_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145469.933, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_thread.allocate_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145467.224, "ph": "X", "cat": "fee", "dur": 3.125, "name": "__init__ (<frozen importlib._bootstrap>:58)"}, {"pid": 10110, "tid": 390948, "ts": 31503145471.099, "ph": "X", "cat": "fee", "dur": 0.167, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145466.016, "ph": "X", "cat": "fee", "dur": 5.333, "name": "_get_module_lock (<frozen importlib._bootstrap>:166)"}, {"pid": 10110, "tid": 390948, "ts": 31503145471.766, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_thread.get_ident"}, {"pid": 10110, "tid": 390948, "ts": 31503145473.016, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_thread.lock.__exit__"}, {"pid": 10110, "tid": 390948, "ts": 31503145471.683, "ph": "X", "cat": "fee", "dur": 1.75, "name": "acquire (<frozen importlib._bootstrap>:87)"}, {"pid": 10110, "tid": 390948, "ts": 31503145465.808, "ph": "X", "cat": "fee", "dur": 7.666, "name": "__enter__ (<frozen importlib._bootstrap>:156)"}, {"pid": 10110, "tid": 390948, "ts": 31503145473.849, "ph": "X", "cat": "fee", "dur": 0.125, "name": "dict.get"}, {"pid": 10110, "tid": 390948, "ts": 31503145474.516, "ph": "X", "cat": "fee", "dur": 0.333, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145477.183, "ph": "X", "cat": "fee", "dur": 0.166, "name": "__init__ (<frozen importlib._bootstrap>:152)"}, {"pid": 10110, "tid": 390948, "ts": 31503145477.724, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145478.391, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_thread.allocate_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145478.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "_thread.allocate_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145478.349, "ph": "X", "cat": "fee", "dur": 0.542, "name": "__init__ (<frozen importlib._bootstrap>:58)"}, {"pid": 10110, "tid": 390948, "ts": 31503145479.308, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145477.641, "ph": "X", "cat": "fee", "dur": 1.792, "name": "_get_module_lock (<frozen importlib._bootstrap>:166)"}, {"pid": 10110, "tid": 390948, "ts": 31503145479.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_thread.get_ident"}, {"pid": 10110, "tid": 390948, "ts": 31503145480.349, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_thread.lock.__exit__"}, {"pid": 10110, "tid": 390948, "ts": 31503145479.558, "ph": "X", "cat": "fee", "dur": 1.0, "name": "acquire (<frozen importlib._bootstrap>:87)"}, {"pid": 10110, "tid": 390948, "ts": 31503145477.516, "ph": "X", "cat": "fee", "dur": 3.083, "name": "__enter__ (<frozen importlib._bootstrap>:156)"}, {"pid": 10110, "tid": 390948, "ts": 31503145480.724, "ph": "X", "cat": "fee", "dur": 0.084, "name": "dict.get"}, {"pid": 10110, "tid": 390948, "ts": 31503145481.266, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145482.433, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145482.349, "ph": "X", "cat": "fee", "dur": 0.209, "name": "__enter__ (<frozen importlib._bootstrap>:874)"}, {"pid": 10110, "tid": 390948, "ts": 31503145483.183, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_imp.is_builtin"}, {"pid": 10110, "tid": 390948, "ts": 31503145483.016, "ph": "X", "cat": "fee", "dur": 0.833, "name": "find_spec (<frozen importlib._bootstrap>:736)"}, {"pid": 10110, "tid": 390948, "ts": 31503145484.141, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145484.058, "ph": "X", "cat": "fee", "dur": 0.208, "name": "__exit__ (<frozen importlib._bootstrap>:878)"}, {"pid": 10110, "tid": 390948, "ts": 31503145484.808, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145484.724, "ph": "X", "cat": "fee", "dur": 0.167, "name": "__enter__ (<frozen importlib._bootstrap>:874)"}, {"pid": 10110, "tid": 390948, "ts": 31503145485.266, "ph": "X", "cat": "fee", "dur": 0.208, "name": "_imp.is_frozen"}, {"pid": 10110, "tid": 390948, "ts": 31503145485.183, "ph": "X", "cat": "fee", "dur": 0.333, "name": "find_spec (<frozen importlib._bootstrap>:811)"}, {"pid": 10110, "tid": 390948, "ts": 31503145485.683, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145485.641, "ph": "X", "cat": "fee", "dur": 0.083, "name": "__exit__ (<frozen importlib._bootstrap>:878)"}, {"pid": 10110, "tid": 390948, "ts": 31503145486.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145485.974, "ph": "X", "cat": "fee", "dur": 0.125, "name": "__enter__ (<frozen importlib._bootstrap>:874)"}, {"pid": 10110, "tid": 390948, "ts": 31503145487.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145487.683, "ph": "X", "cat": "fee", "dur": 27.375, "name": "posix.getcwd"}, {"pid": 10110, "tid": 390948, "ts": 31503145487.433, "ph": "X", "cat": "fee", "dur": 28.333, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145516.183, "ph": "X", "cat": "fee", "dur": 0.291, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145518.016, "ph": "X", "cat": "fee", "dur": 0.208, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145518.849, "ph": "X", "cat": "fee", "dur": 3.75, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145518.641, "ph": "X", "cat": "fee", "dur": 4.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145523.724, "ph": "X", "cat": "fee", "dur": 0.417, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145525.516, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145525.933, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145525.183, "ph": "X", "cat": "fee", "dur": 0.875, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145526.308, "ph": "X", "cat": "fee", "dur": 0.333, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145524.766, "ph": "X", "cat": "fee", "dur": 1.958, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145527.599, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145527.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145527.474, "ph": "X", "cat": "fee", "dur": 0.375, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145527.933, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145527.308, "ph": "X", "cat": "fee", "dur": 0.833, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145528.641, "ph": "X", "cat": "fee", "dur": 8.292, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145528.558, "ph": "X", "cat": "fee", "dur": 8.5, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145528.433, "ph": "X", "cat": "fee", "dur": 9.25, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145528.266, "ph": "X", "cat": "fee", "dur": 9.5, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 10110, "tid": 390948, "ts": 31503145538.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145538.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145538.433, "ph": "X", "cat": "fee", "dur": 0.416, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145538.974, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145538.224, "ph": "X", "cat": "fee", "dur": 0.959, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145539.516, "ph": "X", "cat": "fee", "dur": 2.792, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145539.474, "ph": "X", "cat": "fee", "dur": 2.917, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145539.391, "ph": "X", "cat": "fee", "dur": 3.208, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145539.308, "ph": "X", "cat": "fee", "dur": 3.333, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.141, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.058, "ph": "X", "cat": "fee", "dur": 0.375, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.516, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145542.891, "ph": "X", "cat": "fee", "dur": 0.875, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145544.058, "ph": "X", "cat": "fee", "dur": 2.041, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.974, "ph": "X", "cat": "fee", "dur": 2.209, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.933, "ph": "X", "cat": "fee", "dur": 2.458, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145543.849, "ph": "X", "cat": "fee", "dur": 2.584, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 10110, "tid": 390948, "ts": 31503145546.849, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145547.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145546.766, "ph": "X", "cat": "fee", "dur": 0.333, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145547.224, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145546.641, "ph": "X", "cat": "fee", "dur": 0.708, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145547.641, "ph": "X", "cat": "fee", "dur": 1.833, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145547.599, "ph": "X", "cat": "fee", "dur": 1.917, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145547.516, "ph": "X", "cat": "fee", "dur": 2.208, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145547.433, "ph": "X", "cat": "fee", "dur": 2.375, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 10110, "tid": 390948, "ts": 31503145550.224, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145550.391, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145550.141, "ph": "X", "cat": "fee", "dur": 1.125, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145551.349, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145550.016, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145551.808, "ph": "X", "cat": "fee", "dur": 1.791, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145551.766, "ph": "X", "cat": "fee", "dur": 1.917, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145551.683, "ph": "X", "cat": "fee", "dur": 2.208, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145551.641, "ph": "X", "cat": "fee", "dur": 2.292, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 10110, "tid": 390948, "ts": 31503145554.391, "ph": "X", "cat": "fee", "dur": 2.542, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145554.308, "ph": "X", "cat": "fee", "dur": 2.666, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145554.266, "ph": "X", "cat": "fee", "dur": 3.208, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145554.099, "ph": "X", "cat": "fee", "dur": 3.792, "name": "_path_isdir (<frozen importlib._bootstrap_external>:159)"}, {"pid": 10110, "tid": 390948, "ts": 31503145558.724, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145558.933, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145558.599, "ph": "X", "cat": "fee", "dur": 0.417, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145559.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145558.474, "ph": "X", "cat": "fee", "dur": 0.792, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145559.808, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145560.891, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145561.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145560.808, "ph": "X", "cat": "fee", "dur": 0.291, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145561.141, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145560.683, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145561.474, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145562.099, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145562.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145562.016, "ph": "X", "cat": "fee", "dur": 0.292, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145562.349, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145561.933, "ph": "X", "cat": "fee", "dur": 0.541, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145562.641, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145563.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145563.349, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145563.141, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145563.474, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145563.016, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145563.724, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145564.308, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145564.433, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145564.224, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145564.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145564.099, "ph": "X", "cat": "fee", "dur": 0.584, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145564.849, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145565.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145566.099, "ph": "X", "cat": "fee", "dur": 0.667, "name": "__init__ (<frozen importlib._bootstrap>:351)"}, {"pid": 10110, "tid": 390948, "ts": 31503145517.849, "ph": "X", "cat": "fee", "dur": 49.209, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145567.516, "ph": "X", "cat": "fee", "dur": 0.083, "name": "list.extend"}, {"pid": 10110, "tid": 390948, "ts": 31503145567.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145568.891, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145569.308, "ph": "X", "cat": "fee", "dur": 0.166, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145569.683, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145570.183, "ph": "X", "cat": "fee", "dur": 2.666, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145570.058, "ph": "X", "cat": "fee", "dur": 2.833, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145573.433, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145574.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145574.766, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145574.433, "ph": "X", "cat": "fee", "dur": 0.458, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145574.974, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145574.266, "ph": "X", "cat": "fee", "dur": 0.917, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145575.516, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145576.266, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145576.391, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145576.183, "ph": "X", "cat": "fee", "dur": 0.291, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145576.558, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145576.016, "ph": "X", "cat": "fee", "dur": 0.708, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145576.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145577.516, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145577.599, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145577.433, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145577.766, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145577.308, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145578.058, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145578.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145578.766, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145578.558, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145578.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145578.433, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145579.141, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145579.724, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145579.849, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145579.641, "ph": "X", "cat": "fee", "dur": 0.292, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145579.974, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145579.516, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145580.266, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145569.599, "ph": "X", "cat": "fee", "dur": 10.959, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145581.058, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145581.266, "ph": "X", "cat": "fee", "dur": 0.208, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145581.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145581.808, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145582.058, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145582.308, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145582.599, "ph": "X", "cat": "fee", "dur": 2.834, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145582.558, "ph": "X", "cat": "fee", "dur": 2.916, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145585.891, "ph": "X", "cat": "fee", "dur": 0.208, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145586.683, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145588.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145586.599, "ph": "X", "cat": "fee", "dur": 1.542, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145588.224, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145586.433, "ph": "X", "cat": "fee", "dur": 1.958, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145588.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145589.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145589.433, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145589.266, "ph": "X", "cat": "fee", "dur": 0.292, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145589.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145589.141, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145589.933, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145590.516, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145590.599, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145590.433, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145590.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145590.308, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145591.058, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145591.599, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145591.683, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145591.516, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145591.808, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145591.391, "ph": "X", "cat": "fee", "dur": 0.542, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145592.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145592.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145592.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145592.558, "ph": "X", "cat": "fee", "dur": 0.291, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145592.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145592.433, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145593.183, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145582.224, "ph": "X", "cat": "fee", "dur": 11.292, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145593.724, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145593.933, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145594.308, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145594.558, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145594.849, "ph": "X", "cat": "fee", "dur": 2.5, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145594.766, "ph": "X", "cat": "fee", "dur": 2.625, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145597.724, "ph": "X", "cat": "fee", "dur": 0.167, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145598.558, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145598.683, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145598.433, "ph": "X", "cat": "fee", "dur": 0.375, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145598.849, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145598.308, "ph": "X", "cat": "fee", "dur": 0.708, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145599.183, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145599.849, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145599.974, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145599.766, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145600.933, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145599.641, "ph": "X", "cat": "fee", "dur": 1.417, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145601.224, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145601.891, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145602.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145601.808, "ph": "X", "cat": "fee", "dur": 0.291, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145602.183, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145601.724, "ph": "X", "cat": "fee", "dur": 0.584, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145602.433, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145603.099, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145603.183, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145603.016, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145603.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145602.891, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145603.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145604.224, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145604.349, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145604.141, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145604.474, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145604.016, "ph": "X", "cat": "fee", "dur": 0.542, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145604.724, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145594.474, "ph": "X", "cat": "fee", "dur": 10.542, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145605.183, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145605.391, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145605.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145605.849, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145606.141, "ph": "X", "cat": "fee", "dur": 2.375, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145606.099, "ph": "X", "cat": "fee", "dur": 2.459, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145608.849, "ph": "X", "cat": "fee", "dur": 0.167, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145609.724, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145609.891, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145609.641, "ph": "X", "cat": "fee", "dur": 0.333, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145610.058, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145609.516, "ph": "X", "cat": "fee", "dur": 0.708, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145610.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145610.974, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145611.099, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145610.891, "ph": "X", "cat": "fee", "dur": 0.292, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145611.266, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145610.808, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145611.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145612.141, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145612.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145612.058, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145612.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145611.933, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145612.641, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145614.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145614.141, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145613.933, "ph": "X", "cat": "fee", "dur": 0.291, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145614.308, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145613.808, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145614.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145615.141, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145615.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145615.058, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145615.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145614.933, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145615.683, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145605.766, "ph": "X", "cat": "fee", "dur": 10.208, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145616.141, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145616.308, "ph": "X", "cat": "fee", "dur": 0.166, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145616.558, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145616.766, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145617.099, "ph": "X", "cat": "fee", "dur": 2.459, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145617.016, "ph": "X", "cat": "fee", "dur": 2.583, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145619.974, "ph": "X", "cat": "fee", "dur": 0.167, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145620.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145620.933, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145620.683, "ph": "X", "cat": "fee", "dur": 0.333, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145621.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145620.558, "ph": "X", "cat": "fee", "dur": 0.666, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145621.433, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145622.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145622.141, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145621.933, "ph": "X", "cat": "fee", "dur": 0.291, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145622.266, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145621.808, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145622.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145623.141, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145623.266, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145623.058, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145623.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145622.933, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145623.683, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145624.224, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145624.308, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145624.141, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145624.474, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145624.016, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145624.724, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145625.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145625.474, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145625.266, "ph": "X", "cat": "fee", "dur": 0.917, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145626.266, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145625.141, "ph": "X", "cat": "fee", "dur": 1.25, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145626.516, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145616.724, "ph": "X", "cat": "fee", "dur": 10.209, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145627.308, "ph": "X", "cat": "fee", "dur": 0.416, "name": "__init__ (<frozen importlib._bootstrap>:351)"}, {"pid": 10110, "tid": 390948, "ts": 31503145486.766, "ph": "X", "cat": "fee", "dur": 141.167, "name": "_get_spec (<frozen importlib._bootstrap_external>:1374)"}, {"pid": 10110, "tid": 390948, "ts": 31503145630.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145630.474, "ph": "X", "cat": "fee", "dur": 0.459, "name": "_find_parent_path_names (<frozen importlib._bootstrap_external>:1218)"}, {"pid": 10110, "tid": 390948, "ts": 31503145631.224, "ph": "X", "cat": "fee", "dur": 0.125, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145629.974, "ph": "X", "cat": "fee", "dur": 1.375, "name": "_get_parent_path (<frozen importlib._bootstrap_external>:1228)"}, {"pid": 10110, "tid": 390948, "ts": 31503145629.224, "ph": "X", "cat": "fee", "dur": 2.667, "name": "__init__ (<frozen importlib._bootstrap_external>:1212)"}, {"pid": 10110, "tid": 390948, "ts": 31503145486.433, "ph": "X", "cat": "fee", "dur": 145.666, "name": "find_spec (<frozen importlib._bootstrap_external>:1406)"}, {"pid": 10110, "tid": 390948, "ts": 31503145632.391, "ph": "X", "cat": "fee", "dur": 0.167, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145632.266, "ph": "X", "cat": "fee", "dur": 0.333, "name": "__exit__ (<frozen importlib._bootstrap>:878)"}, {"pid": 10110, "tid": 390948, "ts": 31503145481.641, "ph": "X", "cat": "fee", "dur": 151.375, "name": "_find_spec (<frozen importlib._bootstrap>:901)"}, {"pid": 10110, "tid": 390948, "ts": 31503145633.724, "ph": "X", "cat": "fee", "dur": 0.25, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145634.058, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145634.391, "ph": "X", "cat": "fee", "dur": 0.667, "name": "_new_module (<frozen importlib._bootstrap>:35)"}, {"pid": 10110, "tid": 390948, "ts": 31503145635.433, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145635.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145636.433, "ph": "X", "cat": "fee", "dur": 0.208, "name": "type.__new__"}, {"pid": 10110, "tid": 390948, "ts": 31503145637.391, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145637.724, "ph": "X", "cat": "fee", "dur": 0.125, "name": "parent (<frozen importlib._bootstrap>:398)"}, {"pid": 10110, "tid": 390948, "ts": 31503145638.099, "ph": "X", "cat": "fee", "dur": 1.209, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145639.683, "ph": "X", "cat": "fee", "dur": 0.041, "name": "has_location (<frozen importlib._bootstrap>:406)"}, {"pid": 10110, "tid": 390948, "ts": 31503145635.266, "ph": "X", "cat": "fee", "dur": 4.583, "name": "_init_module_attrs (<frozen importlib._bootstrap>:486)"}, {"pid": 10110, "tid": 390948, "ts": 31503145633.558, "ph": "X", "cat": "fee", "dur": 6.375, "name": "module_from_spec (<frozen importlib._bootstrap>:558)"}, {"pid": 10110, "tid": 390948, "ts": 31503145640.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "exec_module (<frozen importlib._bootstrap_external>:1293)"}, {"pid": 10110, "tid": 390948, "ts": 31503145641.058, "ph": "X", "cat": "fee", "dur": 0.125, "name": "dict.pop"}, {"pid": 10110, "tid": 390948, "ts": 31503145641.558, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145633.349, "ph": "X", "cat": "fee", "dur": 8.5, "name": "_load_unlocked (<frozen importlib._bootstrap>:659)"}, {"pid": 10110, "tid": 390948, "ts": 31503145481.183, "ph": "X", "cat": "fee", "dur": 160.791, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:967)"}, {"pid": 10110, "tid": 390948, "ts": 31503145642.516, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_thread.get_ident"}, {"pid": 10110, "tid": 390948, "ts": 31503145643.724, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_thread.lock.__exit__"}, {"pid": 10110, "tid": 390948, "ts": 31503145642.433, "ph": "X", "cat": "fee", "dur": 1.458, "name": "release (<frozen importlib._bootstrap>:112)"}, {"pid": 10110, "tid": 390948, "ts": 31503145642.224, "ph": "X", "cat": "fee", "dur": 1.792, "name": "__exit__ (<frozen importlib._bootstrap>:160)"}, {"pid": 10110, "tid": 390948, "ts": 31503145644.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145644.599, "ph": "X", "cat": "fee", "dur": 0.084, "name": "dict.get"}, {"pid": 10110, "tid": 390948, "ts": 31503145644.974, "ph": "X", "cat": "fee", "dur": 0.042, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145644.266, "ph": "X", "cat": "fee", "dur": 0.833, "name": "cb (<frozen importlib._bootstrap>:185)"}, {"pid": 10110, "tid": 390948, "ts": 31503145476.974, "ph": "X", "cat": "fee", "dur": 168.667, "name": "_find_and_load (<frozen importlib._bootstrap>:1002)"}, {"pid": 10110, "tid": 390948, "ts": 31503145475.724, "ph": "X", "cat": "fee", "dur": 170.209, "name": "builtins.__import__"}, {"pid": 10110, "tid": 390948, "ts": 31503145475.516, "ph": "X", "cat": "fee", "dur": 170.458, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:220)"}, {"pid": 10110, "tid": 390948, "ts": 31503145647.183, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145647.099, "ph": "X", "cat": "fee", "dur": 0.167, "name": "__enter__ (<frozen importlib._bootstrap>:874)"}, {"pid": 10110, "tid": 390948, "ts": 31503145647.516, "ph": "X", "cat": "fee", "dur": 0.083, "name": "find_spec (<frozen importlib._bootstrap>:736)"}, {"pid": 10110, "tid": 390948, "ts": 31503145648.891, "ph": "X", "cat": "fee", "dur": 0.042, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145648.808, "ph": "X", "cat": "fee", "dur": 0.166, "name": "__exit__ (<frozen importlib._bootstrap>:878)"}, {"pid": 10110, "tid": 390948, "ts": 31503145649.308, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145649.266, "ph": "X", "cat": "fee", "dur": 0.125, "name": "__enter__ (<frozen importlib._bootstrap>:874)"}, {"pid": 10110, "tid": 390948, "ts": 31503145649.683, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_imp.is_frozen"}, {"pid": 10110, "tid": 390948, "ts": 31503145649.599, "ph": "X", "cat": "fee", "dur": 0.25, "name": "find_spec (<frozen importlib._bootstrap>:811)"}, {"pid": 10110, "tid": 390948, "ts": 31503145650.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145649.974, "ph": "X", "cat": "fee", "dur": 0.125, "name": "__exit__ (<frozen importlib._bootstrap>:878)"}, {"pid": 10110, "tid": 390948, "ts": 31503145650.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145650.266, "ph": "X", "cat": "fee", "dur": 0.167, "name": "__enter__ (<frozen importlib._bootstrap>:874)"}, {"pid": 10110, "tid": 390948, "ts": 31503145652.058, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145651.933, "ph": "X", "cat": "fee", "dur": 0.375, "name": "_find_parent_path_names (<frozen importlib._bootstrap_external>:1218)"}, {"pid": 10110, "tid": 390948, "ts": 31503145652.474, "ph": "X", "cat": "fee", "dur": 0.084, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145651.808, "ph": "X", "cat": "fee", "dur": 0.791, "name": "_get_parent_path (<frozen importlib._bootstrap_external>:1228)"}, {"pid": 10110, "tid": 390948, "ts": 31503145651.641, "ph": "X", "cat": "fee", "dur": 1.333, "name": "_recalculate (<frozen importlib._bootstrap_external>:1232)"}, {"pid": 10110, "tid": 390948, "ts": 31503145653.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "builtins.iter"}, {"pid": 10110, "tid": 390948, "ts": 31503145651.224, "ph": "X", "cat": "fee", "dur": 2.0, "name": "__iter__ (<frozen importlib._bootstrap_external>:1245)"}, {"pid": 10110, "tid": 390948, "ts": 31503145653.474, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145655.266, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145655.724, "ph": "X", "cat": "fee", "dur": 2.625, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145655.641, "ph": "X", "cat": "fee", "dur": 2.708, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145655.099, "ph": "X", "cat": "fee", "dur": 5.334, "name": "__init__ (<frozen zipimport>:63)"}, {"pid": 10110, "tid": 390948, "ts": 31503145662.183, "ph": "X", "cat": "fee", "dur": 1.75, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145662.141, "ph": "X", "cat": "fee", "dur": 1.833, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145662.016, "ph": "X", "cat": "fee", "dur": 2.208, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145661.849, "ph": "X", "cat": "fee", "dur": 2.584, "name": "_path_isdir (<frozen importlib._bootstrap_external>:159)"}, {"pid": 10110, "tid": 390948, "ts": 31503145666.266, "ph": "X", "cat": "fee", "dur": 0.167, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145666.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145666.683, "ph": "X", "cat": "fee", "dur": 0.083, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145666.808, "ph": "X", "cat": "fee", "dur": 0.083, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145665.891, "ph": "X", "cat": "fee", "dur": 1.625, "name": "list.extend"}, {"pid": 10110, "tid": 390948, "ts": 31503145668.141, "ph": "X", "cat": "fee", "dur": 0.042, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145668.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145667.974, "ph": "X", "cat": "fee", "dur": 0.5, "name": "list.extend"}, {"pid": 10110, "tid": 390948, "ts": 31503145668.766, "ph": "X", "cat": "fee", "dur": 0.083, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145668.891, "ph": "X", "cat": "fee", "dur": 0.042, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1472)"}, {"pid": 10110, "tid": 390948, "ts": 31503145668.683, "ph": "X", "cat": "fee", "dur": 0.375, "name": "list.extend"}, {"pid": 10110, "tid": 390948, "ts": 31503145669.724, "ph": "X", "cat": "fee", "dur": 0.417, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503145669.558, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_isabs (<frozen importlib._bootstrap_external>:175)"}, {"pid": 10110, "tid": 390948, "ts": 31503145665.141, "ph": "X", "cat": "fee", "dur": 5.625, "name": "__init__ (<frozen importlib._bootstrap_external>:1466)"}, {"pid": 10110, "tid": 390948, "ts": 31503145661.724, "ph": "X", "cat": "fee", "dur": 9.292, "name": "path_hook_for_FileFinder (<frozen importlib._bootstrap_external>:1597)"}, {"pid": 10110, "tid": 390948, "ts": 31503145654.391, "ph": "X", "cat": "fee", "dur": 16.75, "name": "_path_hooks (<frozen importlib._bootstrap_external>:1324)"}, {"pid": 10110, "tid": 390948, "ts": 31503145653.683, "ph": "X", "cat": "fee", "dur": 17.833, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1337)"}, {"pid": 10110, "tid": 390948, "ts": 31503145671.683, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145671.974, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145672.516, "ph": "X", "cat": "fee", "dur": 1.833, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145672.433, "ph": "X", "cat": "fee", "dur": 1.916, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145675.974, "ph": "X", "cat": "fee", "dur": 199.542, "name": "posix.listdir"}, {"pid": 10110, "tid": 390948, "ts": 31503145876.058, "ph": "X", "cat": "fee", "dur": 0.375, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503145877.641, "ph": "X", "cat": "fee", "dur": 0.25, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503145878.599, "ph": "X", "cat": "fee", "dur": 0.292, "name": "str.lower"}, {"pid": 10110, "tid": 390948, "ts": 31503145878.224, "ph": "X", "cat": "fee", "dur": 0.834, "name": "<setcomp> (<frozen importlib._bootstrap_external>:1585)"}, {"pid": 10110, "tid": 390948, "ts": 31503145675.724, "ph": "X", "cat": "fee", "dur": 203.667, "name": "_fill_cache (<frozen importlib._bootstrap_external>:1556)"}, {"pid": 10110, "tid": 390948, "ts": 31503145879.808, "ph": "X", "cat": "fee", "dur": 0.291, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 10110, "tid": 390948, "ts": 31503145880.891, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145881.141, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145880.766, "ph": "X", "cat": "fee", "dur": 0.542, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145881.391, "ph": "X", "cat": "fee", "dur": 0.208, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145880.599, "ph": "X", "cat": "fee", "dur": 1.084, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145881.933, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145882.641, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145882.724, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145882.558, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145882.891, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145882.433, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145883.224, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145883.808, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145883.933, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145883.724, "ph": "X", "cat": "fee", "dur": 0.292, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145884.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145883.599, "ph": "X", "cat": "fee", "dur": 0.625, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145884.391, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145884.974, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145885.099, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145884.891, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145885.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145884.766, "ph": "X", "cat": "fee", "dur": 0.583, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145885.474, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145886.141, "ph": "X", "cat": "fee", "dur": 3.958, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145886.099, "ph": "X", "cat": "fee", "dur": 4.042, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145885.974, "ph": "X", "cat": "fee", "dur": 4.375, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 10110, "tid": 390948, "ts": 31503145885.849, "ph": "X", "cat": "fee", "dur": 4.75, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 10110, "tid": 390948, "ts": 31503145891.391, "ph": "X", "cat": "fee", "dur": 0.208, "name": "__init__ (<frozen importlib._bootstrap_external>:1006)"}, {"pid": 10110, "tid": 390948, "ts": 31503145892.224, "ph": "X", "cat": "fee", "dur": 0.209, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503145893.016, "ph": "X", "cat": "fee", "dur": 0.458, "name": "__init__ (<frozen importlib._bootstrap>:351)"}, {"pid": 10110, "tid": 390948, "ts": 31503145891.974, "ph": "X", "cat": "fee", "dur": 2.167, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:696)"}, {"pid": 10110, "tid": 390948, "ts": 31503145890.974, "ph": "X", "cat": "fee", "dur": 3.25, "name": "_get_spec (<frozen importlib._bootstrap_external>:1500)"}, {"pid": 10110, "tid": 390948, "ts": 31503145671.891, "ph": "X", "cat": "fee", "dur": 222.5, "name": "find_spec (<frozen importlib._bootstrap_external>:1505)"}, {"pid": 10110, "tid": 390948, "ts": 31503145650.849, "ph": "X", "cat": "fee", "dur": 243.834, "name": "_get_spec (<frozen importlib._bootstrap_external>:1374)"}, {"pid": 10110, "tid": 390948, "ts": 31503145650.599, "ph": "X", "cat": "fee", "dur": 244.334, "name": "find_spec (<frozen importlib._bootstrap_external>:1406)"}, {"pid": 10110, "tid": 390948, "ts": 31503145895.224, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503145895.099, "ph": "X", "cat": "fee", "dur": 0.292, "name": "__exit__ (<frozen importlib._bootstrap>:878)"}, {"pid": 10110, "tid": 390948, "ts": 31503145646.516, "ph": "X", "cat": "fee", "dur": 249.167, "name": "_find_spec (<frozen importlib._bootstrap>:901)"}, {"pid": 10110, "tid": 390948, "ts": 31503145897.099, "ph": "X", "cat": "fee", "dur": 0.209, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145897.558, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145897.808, "ph": "X", "cat": "fee", "dur": 0.083, "name": "create_module (<frozen importlib._bootstrap_external>:841)"}, {"pid": 10110, "tid": 390948, "ts": 31503145898.099, "ph": "X", "cat": "fee", "dur": 0.417, "name": "_new_module (<frozen importlib._bootstrap>:35)"}, {"pid": 10110, "tid": 390948, "ts": 31503145898.808, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145898.974, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145899.266, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145899.724, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145899.474, "ph": "X", "cat": "fee", "dur": 0.584, "name": "parent (<frozen importlib._bootstrap>:398)"}, {"pid": 10110, "tid": 390948, "ts": 31503145900.266, "ph": "X", "cat": "fee", "dur": 1.042, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145901.516, "ph": "X", "cat": "fee", "dur": 0.083, "name": "has_location (<frozen importlib._bootstrap>:406)"}, {"pid": 10110, "tid": 390948, "ts": 31503145901.724, "ph": "X", "cat": "fee", "dur": 0.584, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145902.641, "ph": "X", "cat": "fee", "dur": 0.583, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145904.141, "ph": "X", "cat": "fee", "dur": 0.333, "name": "str.endswith"}, {"pid": 10110, "tid": 390948, "ts": 31503145904.849, "ph": "X", "cat": "fee", "dur": 0.042, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503145906.183, "ph": "X", "cat": "fee", "dur": 0.291, "name": "str.rfind"}, {"pid": 10110, "tid": 390948, "ts": 31503145905.933, "ph": "X", "cat": "fee", "dur": 0.666, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503145906.683, "ph": "X", "cat": "fee", "dur": 0.083, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503145905.558, "ph": "X", "cat": "fee", "dur": 1.458, "name": "builtins.max"}, {"pid": 10110, "tid": 390948, "ts": 31503145905.058, "ph": "X", "cat": "fee", "dur": 2.916, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 10110, "tid": 390948, "ts": 31503145908.224, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145908.933, "ph": "X", "cat": "fee", "dur": 0.208, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145910.599, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503145910.516, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_path_isabs (<frozen importlib._bootstrap_external>:175)"}, {"pid": 10110, "tid": 390948, "ts": 31503145911.183, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.lstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145911.724, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145911.849, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145911.974, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145911.599, "ph": "X", "cat": "fee", "dur": 0.459, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145912.141, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145911.433, "ph": "X", "cat": "fee", "dur": 0.916, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145904.683, "ph": "X", "cat": "fee", "dur": 7.791, "name": "cache_from_source (<frozen importlib._bootstrap_external>:361)"}, {"pid": 10110, "tid": 390948, "ts": 31503145903.766, "ph": "X", "cat": "fee", "dur": 8.917, "name": "_get_cached (<frozen importlib._bootstrap_external>:491)"}, {"pid": 10110, "tid": 390948, "ts": 31503145903.349, "ph": "X", "cat": "fee", "dur": 9.542, "name": "cached (<frozen importlib._bootstrap>:385)"}, {"pid": 10110, "tid": 390948, "ts": 31503145913.099, "ph": "X", "cat": "fee", "dur": 0.084, "name": "cached (<frozen importlib._bootstrap>:385)"}, {"pid": 10110, "tid": 390948, "ts": 31503145898.683, "ph": "X", "cat": "fee", "dur": 14.666, "name": "_init_module_attrs (<frozen importlib._bootstrap>:486)"}, {"pid": 10110, "tid": 390948, "ts": 31503145897.433, "ph": "X", "cat": "fee", "dur": 16.0, "name": "module_from_spec (<frozen importlib._bootstrap>:558)"}, {"pid": 10110, "tid": 390948, "ts": 31503145914.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "get_filename (<frozen importlib._bootstrap_external>:1031)"}, {"pid": 10110, "tid": 390948, "ts": 31503145914.308, "ph": "X", "cat": "fee", "dur": 0.75, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:523)"}, {"pid": 10110, "tid": 390948, "ts": 31503145915.391, "ph": "X", "cat": "fee", "dur": 0.042, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503145916.058, "ph": "X", "cat": "fee", "dur": 0.208, "name": "str.rfind"}, {"pid": 10110, "tid": 390948, "ts": 31503145915.974, "ph": "X", "cat": "fee", "dur": 0.334, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503145916.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503145915.808, "ph": "X", "cat": "fee", "dur": 0.708, "name": "builtins.max"}, {"pid": 10110, "tid": 390948, "ts": 31503145915.599, "ph": "X", "cat": "fee", "dur": 1.209, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 10110, "tid": 390948, "ts": 31503145916.933, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503145917.308, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145918.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503145918.808, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_path_isabs (<frozen importlib._bootstrap_external>:175)"}, {"pid": 10110, "tid": 390948, "ts": 31503145919.266, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.lstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145919.724, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145919.849, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145919.974, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503145919.599, "ph": "X", "cat": "fee", "dur": 0.459, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503145920.141, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503145919.474, "ph": "X", "cat": "fee", "dur": 0.792, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503145915.308, "ph": "X", "cat": "fee", "dur": 5.041, "name": "cache_from_source (<frozen importlib._bootstrap_external>:361)"}, {"pid": 10110, "tid": 390948, "ts": 31503145920.849, "ph": "X", "cat": "fee", "dur": 2.584, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503145920.766, "ph": "X", "cat": "fee", "dur": 2.75, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503145920.641, "ph": "X", "cat": "fee", "dur": 3.292, "name": "path_stats (<frozen importlib._bootstrap_external>:1077)"}, {"pid": 10110, "tid": 390948, "ts": 31503145925.141, "ph": "X", "cat": "fee", "dur": 0.167, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503145925.724, "ph": "X", "cat": "fee", "dur": 32.375, "name": "io.open_code"}, {"pid": 10110, "tid": 390948, "ts": 31503145958.974, "ph": "X", "cat": "fee", "dur": 105.0, "name": "_io.BufferedReader.read"}, {"pid": 10110, "tid": 390948, "ts": 31503146064.183, "ph": "X", "cat": "fee", "dur": 3.208, "name": "_io.BufferedReader.__exit__"}, {"pid": 10110, "tid": 390948, "ts": 31503145924.933, "ph": "X", "cat": "fee", "dur": 142.541, "name": "get_data (<frozen importlib._bootstrap_external>:1036)"}, {"pid": 10110, "tid": 390948, "ts": 31503146069.224, "ph": "X", "cat": "fee", "dur": 0.125, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146069.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146070.141, "ph": "X", "cat": "fee", "dur": 0.208, "name": "type.from_bytes"}, {"pid": 10110, "tid": 390948, "ts": 31503146069.683, "ph": "X", "cat": "fee", "dur": 0.708, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 10110, "tid": 390948, "ts": 31503146068.516, "ph": "X", "cat": "fee", "dur": 2.208, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:560)"}, {"pid": 10110, "tid": 390948, "ts": 31503146072.266, "ph": "X", "cat": "fee", "dur": 0.0, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146072.391, "ph": "X", "cat": "fee", "dur": 0.042, "name": "type.from_bytes"}, {"pid": 10110, "tid": 390948, "ts": 31503146072.183, "ph": "X", "cat": "fee", "dur": 0.291, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 10110, "tid": 390948, "ts": 31503146072.933, "ph": "X", "cat": "fee", "dur": 0.0, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146073.016, "ph": "X", "cat": "fee", "dur": 0.083, "name": "type.from_bytes"}, {"pid": 10110, "tid": 390948, "ts": 31503146072.849, "ph": "X", "cat": "fee", "dur": 0.292, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 10110, "tid": 390948, "ts": 31503146072.016, "ph": "X", "cat": "fee", "dur": 1.333, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:593)"}, {"pid": 10110, "tid": 390948, "ts": 31503146073.683, "ph": "X", "cat": "fee", "dur": 0.166, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503146074.391, "ph": "X", "cat": "fee", "dur": 3.875, "name": "marshal.loads"}, {"pid": 10110, "tid": 390948, "ts": 31503146078.433, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503146078.766, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503146079.141, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_imp._fix_co_filename"}, {"pid": 10110, "tid": 390948, "ts": 31503146074.224, "ph": "X", "cat": "fee", "dur": 5.209, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:645)"}, {"pid": 10110, "tid": 390948, "ts": 31503145914.141, "ph": "X", "cat": "fee", "dur": 165.375, "name": "get_code (<frozen importlib._bootstrap_external>:916)"}, {"pid": 10110, "tid": 390948, "ts": 31503146081.599, "ph": "X", "cat": "fee", "dur": 0.375, "name": "<module> (/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/tests/test_cases.py:1)"}, {"pid": 10110, "tid": 390948, "ts": 31503146080.766, "ph": "X", "cat": "fee", "dur": 1.333, "name": "builtins.exec"}, {"pid": 10110, "tid": 390948, "ts": 31503146080.599, "ph": "X", "cat": "fee", "dur": 1.584, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:220)"}, {"pid": 10110, "tid": 390948, "ts": 31503145913.974, "ph": "X", "cat": "fee", "dur": 168.334, "name": "exec_module (<frozen importlib._bootstrap_external>:844)"}, {"pid": 10110, "tid": 390948, "ts": 31503146082.724, "ph": "X", "cat": "fee", "dur": 0.209, "name": "dict.pop"}, {"pid": 10110, "tid": 390948, "ts": 31503146083.516, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503145896.933, "ph": "X", "cat": "fee", "dur": 186.958, "name": "_load_unlocked (<frozen importlib._bootstrap>:659)"}, {"pid": 10110, "tid": 390948, "ts": 31503146084.308, "ph": "X", "cat": "fee", "dur": 0.208, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503146084.808, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.setattr"}, {"pid": 10110, "tid": 390948, "ts": 31503145474.266, "ph": "X", "cat": "fee", "dur": 612.667, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:967)"}, {"pid": 10110, "tid": 390948, "ts": 31503146087.724, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_thread.get_ident"}, {"pid": 10110, "tid": 390948, "ts": 31503146089.183, "ph": "X", "cat": "fee", "dur": 0.291, "name": "_thread.lock.__exit__"}, {"pid": 10110, "tid": 390948, "ts": 31503146087.558, "ph": "X", "cat": "fee", "dur": 2.041, "name": "release (<frozen importlib._bootstrap>:112)"}, {"pid": 10110, "tid": 390948, "ts": 31503146087.266, "ph": "X", "cat": "fee", "dur": 2.417, "name": "__exit__ (<frozen importlib._bootstrap>:160)"}, {"pid": 10110, "tid": 390948, "ts": 31503146090.183, "ph": "X", "cat": "fee", "dur": 0.125, "name": "_imp.acquire_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503146090.474, "ph": "X", "cat": "fee", "dur": 0.125, "name": "dict.get"}, {"pid": 10110, "tid": 390948, "ts": 31503146090.849, "ph": "X", "cat": "fee", "dur": 0.084, "name": "_imp.release_lock"}, {"pid": 10110, "tid": 390948, "ts": 31503146090.058, "ph": "X", "cat": "fee", "dur": 0.916, "name": "cb (<frozen importlib._bootstrap>:185)"}, {"pid": 10110, "tid": 390948, "ts": 31503145464.683, "ph": "X", "cat": "fee", "dur": 626.958, "name": "_find_and_load (<frozen importlib._bootstrap>:1002)"}, {"pid": 10110, "tid": 390948, "ts": 31503146096.016, "ph": "X", "cat": "fee", "dur": 0.083, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503146096.433, "ph": "X", "cat": "fee", "dur": 0.166, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503146096.349, "ph": "X", "cat": "fee", "dur": 0.334, "name": "_get_sep (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py:41)"}, {"pid": 10110, "tid": 390948, "ts": 31503146096.849, "ph": "X", "cat": "fee", "dur": 0.292, "name": "str.rfind"}, {"pid": 10110, "tid": 390948, "ts": 31503146095.891, "ph": "X", "cat": "fee", "dur": 1.958, "name": "split (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py:100)"}, {"pid": 10110, "tid": 390948, "ts": 31503146098.308, "ph": "X", "cat": "fee", "dur": 6.083, "name": "posix.mkdir"}, {"pid": 10110, "tid": 390948, "ts": 31503146105.558, "ph": "X", "cat": "fee", "dur": 2.333, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503146108.391, "ph": "X", "cat": "fee", "dur": 0.375, "name": "_stat.S_ISDIR"}, {"pid": 10110, "tid": 390948, "ts": 31503146105.308, "ph": "X", "cat": "fee", "dur": 3.5, "name": "isdir (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/genericpath.py:39)"}, {"pid": 10110, "tid": 390948, "ts": 31503146094.808, "ph": "X", "cat": "fee", "dur": 14.583, "name": "makedirs (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/os.py:200)"}, {"pid": 10110, "tid": 390948, "ts": 31503146110.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503146111.224, "ph": "X", "cat": "fee", "dur": 0.375, "name": "__init__ (<frozen importlib._bootstrap>:351)"}, {"pid": 10110, "tid": 390948, "ts": 31503146112.266, "ph": "X", "cat": "fee", "dur": 0.458, "name": "_imp.extension_suffixes"}, {"pid": 10110, "tid": 390948, "ts": 31503146111.933, "ph": "X", "cat": "fee", "dur": 1.208, "name": "_get_supported_file_loaders (<frozen importlib._bootstrap_external>:1634)"}, {"pid": 10110, "tid": 390948, "ts": 31503146113.558, "ph": "X", "cat": "fee", "dur": 0.25, "name": "str.endswith"}, {"pid": 10110, "tid": 390948, "ts": 31503146114.058, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.endswith"}, {"pid": 10110, "tid": 390948, "ts": 31503146114.433, "ph": "X", "cat": "fee", "dur": 0.166, "name": "__init__ (<frozen importlib._bootstrap_external>:1006)"}, {"pid": 10110, "tid": 390948, "ts": 31503146115.099, "ph": "X", "cat": "fee", "dur": 0.459, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146116.599, "ph": "X", "cat": "fee", "dur": 0.042, "name": "get_filename (<frozen importlib._bootstrap_external>:1031)"}, {"pid": 10110, "tid": 390948, "ts": 31503146116.183, "ph": "X", "cat": "fee", "dur": 0.541, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:523)"}, {"pid": 10110, "tid": 390948, "ts": 31503146117.599, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.rfind"}, {"pid": 10110, "tid": 390948, "ts": 31503146117.474, "ph": "X", "cat": "fee", "dur": 0.334, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503146117.933, "ph": "X", "cat": "fee", "dur": 0.041, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503146117.266, "ph": "X", "cat": "fee", "dur": 0.875, "name": "builtins.max"}, {"pid": 10110, "tid": 390948, "ts": 31503146116.933, "ph": "X", "cat": "fee", "dur": 1.791, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 10110, "tid": 390948, "ts": 31503146119.308, "ph": "X", "cat": "fee", "dur": 3.291, "name": "str.rsplit"}, {"pid": 10110, "tid": 390948, "ts": 31503146122.849, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503146115.974, "ph": "X", "cat": "fee", "dur": 7.25, "name": "is_package (<frozen importlib._bootstrap_external>:833)"}, {"pid": 10110, "tid": 390948, "ts": 31503146110.433, "ph": "X", "cat": "fee", "dur": 13.166, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:696)"}, {"pid": 10110, "tid": 390948, "ts": 31503146124.016, "ph": "X", "cat": "fee", "dur": 0.125, "name": "builtins.hasattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146124.308, "ph": "X", "cat": "fee", "dur": 0.041, "name": "create_module (<frozen importlib._bootstrap_external>:841)"}, {"pid": 10110, "tid": 390948, "ts": 31503146124.558, "ph": "X", "cat": "fee", "dur": 0.458, "name": "_new_module (<frozen importlib._bootstrap>:35)"}, {"pid": 10110, "tid": 390948, "ts": 31503146125.266, "ph": "X", "cat": "fee", "dur": 0.083, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146125.433, "ph": "X", "cat": "fee", "dur": 0.0, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146125.683, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146126.016, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503146125.849, "ph": "X", "cat": "fee", "dur": 0.334, "name": "parent (<frozen importlib._bootstrap>:398)"}, {"pid": 10110, "tid": 390948, "ts": 31503146127.016, "ph": "X", "cat": "fee", "dur": 0.792, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146128.016, "ph": "X", "cat": "fee", "dur": 0.083, "name": "has_location (<frozen importlib._bootstrap>:406)"}, {"pid": 10110, "tid": 390948, "ts": 31503146128.183, "ph": "X", "cat": "fee", "dur": 0.583, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146129.058, "ph": "X", "cat": "fee", "dur": 0.583, "name": "builtins.getattr"}, {"pid": 10110, "tid": 390948, "ts": 31503146130.308, "ph": "X", "cat": "fee", "dur": 0.166, "name": "str.endswith"}, {"pid": 10110, "tid": 390948, "ts": 31503146130.766, "ph": "X", "cat": "fee", "dur": 0.0, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503146131.349, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rfind"}, {"pid": 10110, "tid": 390948, "ts": 31503146131.266, "ph": "X", "cat": "fee", "dur": 0.25, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503146131.599, "ph": "X", "cat": "fee", "dur": 0.042, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503146131.141, "ph": "X", "cat": "fee", "dur": 0.625, "name": "builtins.max"}, {"pid": 10110, "tid": 390948, "ts": 31503146130.891, "ph": "X", "cat": "fee", "dur": 1.208, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 10110, "tid": 390948, "ts": 31503146132.266, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503146132.641, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503146133.683, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503146133.599, "ph": "X", "cat": "fee", "dur": 0.292, "name": "_path_isabs (<frozen importlib._bootstrap_external>:175)"}, {"pid": 10110, "tid": 390948, "ts": 31503146134.099, "ph": "X", "cat": "fee", "dur": 11.875, "name": "posix.getcwd"}, {"pid": 10110, "tid": 390948, "ts": 31503146146.683, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146147.016, "ph": "X", "cat": "fee", "dur": 0.0, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146146.474, "ph": "X", "cat": "fee", "dur": 0.625, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503146147.266, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503146146.224, "ph": "X", "cat": "fee", "dur": 1.25, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.016, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.lstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.474, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.599, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.724, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.391, "ph": "X", "cat": "fee", "dur": 0.417, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.891, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503146148.224, "ph": "X", "cat": "fee", "dur": 0.792, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503146130.599, "ph": "X", "cat": "fee", "dur": 18.5, "name": "cache_from_source (<frozen importlib._bootstrap_external>:361)"}, {"pid": 10110, "tid": 390948, "ts": 31503146130.141, "ph": "X", "cat": "fee", "dur": 19.083, "name": "_get_cached (<frozen importlib._bootstrap_external>:491)"}, {"pid": 10110, "tid": 390948, "ts": 31503146129.766, "ph": "X", "cat": "fee", "dur": 19.75, "name": "cached (<frozen importlib._bootstrap>:385)"}, {"pid": 10110, "tid": 390948, "ts": 31503146149.724, "ph": "X", "cat": "fee", "dur": 0.125, "name": "cached (<frozen importlib._bootstrap>:385)"}, {"pid": 10110, "tid": 390948, "ts": 31503146125.183, "ph": "X", "cat": "fee", "dur": 24.791, "name": "_init_module_attrs (<frozen importlib._bootstrap>:486)"}, {"pid": 10110, "tid": 390948, "ts": 31503146123.891, "ph": "X", "cat": "fee", "dur": 26.208, "name": "module_from_spec (<frozen importlib._bootstrap>:558)"}, {"pid": 10110, "tid": 390948, "ts": 31503146151.016, "ph": "X", "cat": "fee", "dur": 0.042, "name": "get_filename (<frozen importlib._bootstrap_external>:1031)"}, {"pid": 10110, "tid": 390948, "ts": 31503146150.641, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:523)"}, {"pid": 10110, "tid": 390948, "ts": 31503146151.474, "ph": "X", "cat": "fee", "dur": 0.042, "name": "posix.fspath"}, {"pid": 10110, "tid": 390948, "ts": 31503146152.141, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.rfind"}, {"pid": 10110, "tid": 390948, "ts": 31503146152.016, "ph": "X", "cat": "fee", "dur": 0.333, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503146152.433, "ph": "X", "cat": "fee", "dur": 0.041, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 10110, "tid": 390948, "ts": 31503146151.849, "ph": "X", "cat": "fee", "dur": 0.792, "name": "builtins.max"}, {"pid": 10110, "tid": 390948, "ts": 31503146151.599, "ph": "X", "cat": "fee", "dur": 1.417, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 10110, "tid": 390948, "ts": 31503146153.141, "ph": "X", "cat": "fee", "dur": 0.167, "name": "str.rpartition"}, {"pid": 10110, "tid": 390948, "ts": 31503146153.474, "ph": "X", "cat": "fee", "dur": 0.084, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503146154.266, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.startswith"}, {"pid": 10110, "tid": 390948, "ts": 31503146154.183, "ph": "X", "cat": "fee", "dur": 0.208, "name": "_path_isabs (<frozen importlib._bootstrap_external>:175)"}, {"pid": 10110, "tid": 390948, "ts": 31503146155.433, "ph": "X", "cat": "fee", "dur": 9.958, "name": "posix.getcwd"}, {"pid": 10110, "tid": 390948, "ts": 31503146165.974, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146166.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146165.808, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503146166.433, "ph": "X", "cat": "fee", "dur": 0.166, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503146165.599, "ph": "X", "cat": "fee", "dur": 1.084, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.016, "ph": "X", "cat": "fee", "dur": 0.083, "name": "str.lstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.433, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.558, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.683, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.349, "ph": "X", "cat": "fee", "dur": 0.417, "name": "<listcomp> (<frozen importlib._bootstrap_external>:123)"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.849, "ph": "X", "cat": "fee", "dur": 0.125, "name": "str.join"}, {"pid": 10110, "tid": 390948, "ts": 31503146167.183, "ph": "X", "cat": "fee", "dur": 0.833, "name": "_path_join (<frozen importlib._bootstrap_external>:121)"}, {"pid": 10110, "tid": 390948, "ts": 31503146151.349, "ph": "X", "cat": "fee", "dur": 16.709, "name": "cache_from_source (<frozen importlib._bootstrap_external>:361)"}, {"pid": 10110, "tid": 390948, "ts": 31503146168.558, "ph": "X", "cat": "fee", "dur": 3.25, "name": "posix.stat"}, {"pid": 10110, "tid": 390948, "ts": 31503146168.474, "ph": "X", "cat": "fee", "dur": 3.375, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 10110, "tid": 390948, "ts": 31503146168.308, "ph": "X", "cat": "fee", "dur": 3.875, "name": "path_stats (<frozen importlib._bootstrap_external>:1077)"}, {"pid": 10110, "tid": 390948, "ts": 31503146173.058, "ph": "X", "cat": "fee", "dur": 0.125, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503146173.558, "ph": "X", "cat": "fee", "dur": 22.791, "name": "io.open_code"}, {"pid": 10110, "tid": 390948, "ts": 31503146196.849, "ph": "X", "cat": "fee", "dur": 114.417, "name": "_io.BufferedReader.read"}, {"pid": 10110, "tid": 390948, "ts": 31503146311.391, "ph": "X", "cat": "fee", "dur": 2.125, "name": "_io.BufferedReader.__exit__"}, {"pid": 10110, "tid": 390948, "ts": 31503146172.891, "ph": "X", "cat": "fee", "dur": 140.75, "name": "get_data (<frozen importlib._bootstrap_external>:1036)"}, {"pid": 10110, "tid": 390948, "ts": 31503146314.933, "ph": "X", "cat": "fee", "dur": 0.166, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146315.349, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146315.558, "ph": "X", "cat": "fee", "dur": 0.166, "name": "type.from_bytes"}, {"pid": 10110, "tid": 390948, "ts": 31503146315.308, "ph": "X", "cat": "fee", "dur": 0.458, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 10110, "tid": 390948, "ts": 31503146314.474, "ph": "X", "cat": "fee", "dur": 1.542, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:560)"}, {"pid": 10110, "tid": 390948, "ts": 31503146317.099, "ph": "X", "cat": "fee", "dur": 0.0, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146317.224, "ph": "X", "cat": "fee", "dur": 0.042, "name": "type.from_bytes"}, {"pid": 10110, "tid": 390948, "ts": 31503146317.058, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 10110, "tid": 390948, "ts": 31503146317.641, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.len"}, {"pid": 10110, "tid": 390948, "ts": 31503146317.766, "ph": "X", "cat": "fee", "dur": 0.042, "name": "type.from_bytes"}, {"pid": 10110, "tid": 390948, "ts": 31503146317.599, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 10110, "tid": 390948, "ts": 31503146316.891, "ph": "X", "cat": "fee", "dur": 1.083, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:593)"}, {"pid": 10110, "tid": 390948, "ts": 31503146318.308, "ph": "X", "cat": "fee", "dur": 0.166, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503146318.849, "ph": "X", "cat": "fee", "dur": 3.125, "name": "marshal.loads"}, {"pid": 10110, "tid": 390948, "ts": 31503146322.099, "ph": "X", "cat": "fee", "dur": 0.042, "name": "builtins.isinstance"}, {"pid": 10110, "tid": 390948, "ts": 31503146322.308, "ph": "X", "cat": "fee", "dur": 0.083, "name": "_verbose_message (<frozen importlib._bootstrap>:231)"}, {"pid": 10110, "tid": 390948, "ts": 31503146322.558, "ph": "X", "cat": "fee", "dur": 0.166, "name": "_imp._fix_co_filename"}, {"pid": 10110, "tid": 390948, "ts": 31503146318.683, "ph": "X", "cat": "fee", "dur": 4.083, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:645)"}, {"pid": 10110, "tid": 390948, "ts": 31503146150.516, "ph": "X", "cat": "fee", "dur": 172.292, "name": "get_code (<frozen importlib._bootstrap_external>:916)"}, {"pid": 10110, "tid": 390948, "ts": 31503146324.099, "ph": "X", "cat": "fee", "dur": 0.209, "name": "<module> (reference/median_ref.py:1)"}, {"pid": 10110, "tid": 390948, "ts": 31503146323.558, "ph": "X", "cat": "fee", "dur": 0.791, "name": "builtins.exec"}, {"pid": 10110, "tid": 390948, "ts": 31503146323.433, "ph": "X", "cat": "fee", "dur": 0.958, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:220)"}, {"pid": 10110, "tid": 390948, "ts": 31503146150.391, "ph": "X", "cat": "fee", "dur": 174.125, "name": "exec_module (<frozen importlib._bootstrap_external>:844)"}, {"pid": 10110, "tid": 390948, "ts": 31503146109.724, "ph": "X", "cat": "fee", "dur": 2879.543, "name": "run_trace (/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py:6)"}, {"pid": 10110, "tid": 390948, "ts": 31503145456.891, "ph": "X", "cat": "fee", "dur": 3533.627, "name": "<module> (/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py:1)"}, {"pid": 10110, "tid": 390948, "ts": 31503145455.058, "ph": "X", "cat": "fee", "dur": 3535.46, "name": "builtins.exec"}], "viztracer_metadata": {"overflow": false, "version": "1.0.3"}, "file_info": {"files": {"/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/tests/test_cases.py": ["test_inputs = [\n    (1, 2, 3),\n    (3, 1, 2),\n    (9, 7, 8),\n    (10, 10, 5),\n]\n", 6], "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py": ["\"\"\"Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n\"\"\"\n\n# Strings representing various path-related bits and pieces.\n# These are primarily for export; internally, they are hardcoded.\n# Should be set before imports for resolving cyclic dependency.\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"commonpath\"]\n\n\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b'/'\n    else:\n        return '/'\n\n# Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.\n# On MS-DOS this may also turn slashes into backslashes; however, other\n# normalizations (such as optimizing '../' away) are not allowed\n# (another function should be defined to do that).\n\ndef normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    return os.fspath(s)\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\n\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n\n\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a '/' unless the first part is empty or already ends in '/'.\n\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    a = os.fspath(a)\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        for b in map(os.fspath, p):\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types('join', a, *p)\n        raise\n    return path\n\n\n# Split a path in head (everything up to the last '/') and tail (the\n# rest).  If the path ends in '/', tail will be empty.  If there is no\n# '/' in the path, head  will be empty.\n# Trailing '/'es are stripped from head unless it is the root.\n\ndef split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\n\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n\n\n# Return the tail (basename) part of a path, same as split(path)[1].\n\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n\n\n# Return the head (dirname) part of a path, same as split(path)[0].\n\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\n\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n\n\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\n\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    try:\n        s1 = os.lstat(path)\n    except (OSError, ValueError):\n        # It doesn't exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n            return False\n\n    if isinstance(path, bytes):\n        parent = join(path, b'..')\n    else:\n        parent = join(path, '..')\n    parent = realpath(parent)\n    try:\n        s2 = os.lstat(parent)\n    except (OSError, ValueError):\n        return False\n\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\n\n\n# Expand paths beginning with '~' or '~user'.\n# '~' means $HOME; '~user' means that user's home directory.\n# If the path doesn't begin with '~', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module 'glob' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if 'HOME' not in os.environ:\n            import pwd\n            try:\n                userhome = pwd.getpwuid(os.getuid()).pw_dir\n            except KeyError:\n                # bpo-10496: if the current user identifier doesn't exist in the\n                # password database, return the path unchanged\n                return path\n        else:\n            userhome = os.environ['HOME']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, 'ASCII')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            # bpo-10496: if the user name from the path doesn't exist in the\n            # password database, return the path unchanged\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b'/'\n    else:\n        root = '/'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n\n\n# Expand paths containing shell variable substitutions.\n# This expands the forms $variable and ${variable} only.\n# Non-existent variables are left unchanged.\n\n_varprog = None\n_varprogb = None\n\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprogb.search\n        start = b'{'\n        end = b'}'\n        environ = getattr(os, 'environb', None)\n    else:\n        if '$' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprog.search\n        start = '{'\n        end = '}'\n        environ = os.environ\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        try:\n            if environ is None:\n                value = os.fsencode(os.environ[os.fsdecode(name)])\n            else:\n                value = environ[name]\n        except KeyError:\n            i = j\n        else:\n            tail = path[j:]\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n    return path\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.\n# It should be understood that this may change the meaning of the path\n# if it contains symbolic links!\n\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'\n        empty = ''\n        dot = '.'\n        dotdot = '..'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    # POSIX allows one or two initial slashes, but treats three or more\n    # as single slash.\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*initial_slashes + path\n    return path or dot\n\n\ndef abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n\n# Return a canonical path (i.e. the absolute location of a file on the\n# filesystem).\n\ndef realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    filename = os.fspath(filename)\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n        sep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '/'\n        curdir = '.'\n        pardir = '..'\n\n    if isabs(rest):\n        rest = rest[1:]\n        path = sep\n\n    while rest:\n        name, _, rest = rest.partition(sep)\n        if not name or name == curdir:\n            # current dir\n            continue\n        if name == pardir:\n            # parent dir\n            if path:\n                path, name = split(path)\n                if name == pardir:\n                    path = join(path, pardir, pardir)\n            else:\n                path = pardir\n            continue\n        newpath = join(path, name)\n        if not islink(newpath):\n            path = newpath\n            continue\n        # Resolve the symbolic link\n        if newpath in seen:\n            # Already seen this path\n            path = seen[newpath]\n            if path is not None:\n                # use cached value\n                continue\n            # The symlink is not resolved, so we must have a symlink loop.\n            # Return already resolved part + rest of the path unchanged.\n            return join(newpath, rest), False\n        seen[newpath] = None # not resolved symlink\n        path, ok = _joinrealpath(path, os.readlink(newpath), seen)\n        if not ok:\n            return join(path, rest), False\n        seen[newpath] = path # resolved symlink\n\n    return path, True\n\n\nsupports_unicode_filenames = (sys.platform == 'darwin')\n\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n\n    if not path:\n        raise ValueError(\"no path specified\")\n\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:\n        curdir = '.'\n        sep = '/'\n        pardir = '..'\n\n    if start is None:\n        start = curdir\n    else:\n        start = os.fspath(start)\n\n    try:\n        start_list = [x for x in abspath(start).split(sep) if x]\n        path_list = [x for x in abspath(path).split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = len(commonprefix([start_list, path_list]))\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types('relpath', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The paths are not normalized before comparing them (this is the\n# responsibility of the caller). Any trailing separator is stripped from the\n# returned path.\n\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'/'\n        curdir = b'.'\n    else:\n        sep = '/'\n        curdir = '.'\n\n    try:\n        split_paths = [path.split(sep) for path in paths]\n\n        try:\n            isabs, = set(p[:1] == sep for p in paths)\n        except ValueError:\n            raise ValueError(\"Can't mix absolute and relative paths\") from None\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        common = s1\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = s1[:i]\n                break\n\n        prefix = sep if isabs else sep[:0]\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types('commonpath', *paths)\n        raise\n", 525], "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/genericpath.py": ["\"\"\"\nPath operations common to more than one OS\nDo not use directly.  The OS specific modules import the appropriate\nfunctions from this module themselves.\n\"\"\"\nimport os\nimport stat\n\n__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\n           'getsize', 'isdir', 'isfile', 'samefile', 'sameopenfile',\n           'samestat']\n\n\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n\n\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n    \"\"\"Test whether a path is a regular file\"\"\"\n    try:\n        st = os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISREG(st.st_mode)\n\n\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\ndef isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISDIR(st.st_mode)\n\n\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\n\n\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\n\n\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\n\n\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n\n\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n    # they most likely won't be using an os.PathLike object in the sublists.\n    if not isinstance(m[0], (list, tuple)):\n        m = tuple(map(os.fspath, m))\n    s1 = min(m)\n    s2 = max(m)\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            return s1[:i]\n    return s1\n\n# Are two stat buffers (obtained from stat, fstat or lstat)\n# describing the same file?\ndef samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n\n\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file or directory\n\n    This is determined by the device number and i-node number and\n    raises an exception if an os.stat() call on either pathname fails.\n    \"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n\n\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\n# Generic implementation of splitext, to be parametrized with\n# the separators\ndef _splitext(p, sep, altsep, extsep):\n    \"\"\"Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns \"(root, ext)\"; ext may be empty.\"\"\"\n    # NOTE: This code must work for text and bytes strings.\n\n    sepIndex = p.rfind(sep)\n    if altsep:\n        altsepIndex = p.rfind(altsep)\n        sepIndex = max(sepIndex, altsepIndex)\n\n    dotIndex = p.rfind(extsep)\n    if dotIndex > sepIndex:\n        # skip all leading dots\n        filenameIndex = sepIndex + 1\n        while filenameIndex < dotIndex:\n            if p[filenameIndex:filenameIndex+1] != extsep:\n                return p[:dotIndex], p[dotIndex:]\n            filenameIndex += 1\n\n    return p, p[:0]\n\ndef _check_arg_types(funcname, *args):\n    hasstr = hasbytes = False\n    for s in args:\n        if isinstance(s, str):\n            hasstr = True\n        elif isinstance(s, bytes):\n            hasbytes = True\n        else:\n            raise TypeError(f'{funcname}() argument must be str, bytes, or '\n                            f'os.PathLike object, not {s.__class__.__name__!r}') from None\n    if hasstr and hasbytes:\n        raise TypeError(\"Can't mix strings and bytes in path components\") from None\n", 155], "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/os.py": ["r\"\"\"OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n\"\"\"\n\n#'\nimport abc\nimport sys\nimport stat as st\n\nfrom _collections_abc import _check_methods\n\nGenericAlias = type(list[int])\n\n_names = sys.builtin_module_names\n\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\n\ndef _exists(name):\n    return name in globals()\n\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\n\n# Any new dependencies of the os module and/or changes in path separator\n# requires updating importlib as well.\nif 'posix' in _names:\n    name = 'posix'\n    linesep = '\\n'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import posixpath as path\n\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif 'nt' in _names:\n    name = 'nt'\n    linesep = '\\r\\n'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import ntpath as path\n\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\n\nelse:\n    raise ImportError('no os specific module found')\n\nsys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n\ndel _names\n\n\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_FUTIMESAT\",  \"utime\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_MKDIRAT\",    \"mkdir\")\n    _add(\"HAVE_MKFIFOAT\",   \"mkfifo\")\n    _add(\"HAVE_MKNODAT\",    \"mknod\")\n    _add(\"HAVE_OPENAT\",     \"open\")\n    _add(\"HAVE_READLINKAT\", \"readlink\")\n    _add(\"HAVE_RENAMEAT\",   \"rename\")\n    _add(\"HAVE_SYMLINKAT\",  \"symlink\")\n    _add(\"HAVE_UNLINKAT\",   \"unlink\")\n    _add(\"HAVE_UNLINKAT\",   \"rmdir\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    supports_dir_fd = _set\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    supports_effective_ids = _set\n\n    _set = set()\n    _add(\"HAVE_FCHDIR\",     \"chdir\")\n    _add(\"HAVE_FCHMOD\",     \"chmod\")\n    _add(\"HAVE_FCHOWN\",     \"chown\")\n    _add(\"HAVE_FDOPENDIR\",  \"listdir\")\n    _add(\"HAVE_FDOPENDIR\",  \"scandir\")\n    _add(\"HAVE_FEXECVE\",    \"execve\")\n    _set.add(stat) # fstat always works\n    _add(\"HAVE_FTRUNCATE\",  \"truncate\")\n    _add(\"HAVE_FUTIMENS\",   \"utime\")\n    _add(\"HAVE_FUTIMES\",    \"utime\")\n    _add(\"HAVE_FPATHCONF\",  \"pathconf\")\n    if _exists(\"statvfs\") and _exists(\"fstatvfs\"): # mac os x10.3\n        _add(\"HAVE_FSTATVFS\", \"statvfs\")\n    supports_fd = _set\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    # Some platforms don't support lchmod().  Often the function exists\n    # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n    # (No, I don't know why that's a good design.)  ./configure will detect\n    # this and reject it--so HAVE_LCHMOD still won't be defined on such\n    # platforms.  This is Very Helpful.\n    #\n    # However, sometimes platforms without a working lchmod() *do* have\n    # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n    # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n    # it behave like lchmod().  So in theory it would be a suitable\n    # replacement for lchmod().  But when lchmod() doesn't work, fchmodat()'s\n    # flag doesn't work *either*.  Sadly ./configure isn't sophisticated\n    # enough to detect this condition--it only determines whether or not\n    # fchmodat() minimally works.\n    #\n    # Therefore we simply ignore fchmodat() when deciding whether or not\n    # os.chmod supports follow_symlinks.  Just checking lchmod() is\n    # sufficient.  After all--if you have a working fchmodat(), your\n    # lchmod() almost certainly works too.\n    #\n    # _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_LCHFLAGS\",   \"chflags\")\n    _add(\"HAVE_LCHMOD\",     \"chmod\")\n    if _exists(\"lchown\"): # mac os x10.3\n        _add(\"HAVE_LCHOWN\", \"chown\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_LUTIMES\",    \"utime\")\n    _add(\"HAVE_LSTAT\",      \"stat\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    _add(\"MS_WINDOWS\",      \"stat\")\n    supports_follow_symlinks = _set\n\n    del _set\n    del _have_functions\n    del _globals\n    del _add\n\n\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\n# Other possible SEEK values are directly imported from posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\n\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, exist_ok=exist_ok)\n        except FileExistsError:\n            # Defeats race condition when another thread created the path\n            pass\n        cdir = curdir\n        if isinstance(tail, bytes):\n            cdir = bytes(curdir, 'ASCII')\n        if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError:\n        # Cannot rely on checking for EEXIST, since the operating system\n        # could give priority to other errors like EACCES or EROFS\n        if not exist_ok or not path.isdir(name):\n            raise\n\ndef removedirs(name):\n    \"\"\"removedirs(name)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    \"\"\"\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except OSError:\n            break\n        head, tail = path.split(head)\n\ndef renames(old, new):\n    \"\"\"renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    \"\"\"\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except OSError:\n            pass\n\n__all__.extend([\"makedirs\", \"removedirs\", \"renames\"])\n\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg 'topdown' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune the\n    search, or to impose a specific order of visiting.  Modifying dirnames when\n    topdown is false has no effect on the behavior of os.walk(), since the\n    directories in dirnames have already been generated by the time dirnames\n    itself is generated. No matter the value of topdown, the list of\n    subdirectories is retrieved before the tuples for the directory and its\n    subdirectories are generated.\n\n    By default errors from the os.scandir() call are ignored.  If\n    optional arg 'onerror' is specified, it should be a function; it\n    will be called with one argument, an OSError instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument 'followlinks' to true.\n\n    Caution:  if you pass a relative pathname for top, don't change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn't\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk('python/Lib/email'):\n        print(root, \"consumes\", end=\"\")\n        print(sum(getsize(join(root, name)) for name in files), end=\"\")\n        print(\"bytes in\", len(files), \"non-directory files\")\n        if 'CVS' in dirs:\n            dirs.remove('CVS')  # don't visit CVS directories\n\n    \"\"\"\n    sys.audit(\"os.walk\", top, topdown, onerror, followlinks)\n    return _walk(fspath(top), topdown, onerror, followlinks)\n\ndef _walk(top, topdown, onerror, followlinks):\n    dirs = []\n    nondirs = []\n    walk_dirs = []\n\n    # We may not have read permission for top, in which case we can't\n    # get a list of the files the directory contains.  os.walk\n    # always suppressed the exception then, rather than blow up for a\n    # minor reason when (say) a thousand readable directories are still\n    # left to visit.  That logic is copied here.\n    try:\n        # Note that scandir is global in this module due\n        # to earlier import-*.\n        scandir_it = scandir(top)\n    except OSError as error:\n        if onerror is not None:\n            onerror(error)\n        return\n\n    with scandir_it:\n        while True:\n            try:\n                try:\n                    entry = next(scandir_it)\n                except StopIteration:\n                    break\n            except OSError as error:\n                if onerror is not None:\n                    onerror(error)\n                return\n\n            try:\n                is_dir = entry.is_dir()\n            except OSError:\n                # If is_dir() raises an OSError, consider that the entry is not\n                # a directory, same behaviour than os.path.isdir().\n                is_dir = False\n\n            if is_dir:\n                dirs.append(entry.name)\n            else:\n                nondirs.append(entry.name)\n\n            if not topdown and is_dir:\n                # Bottom-up: recurse into sub-directory, but exclude symlinks to\n                # directories if followlinks is False\n                if followlinks:\n                    walk_into = True\n                else:\n                    try:\n                        is_symlink = entry.is_symlink()\n                    except OSError:\n                        # If is_symlink() raises an OSError, consider that the\n                        # entry is not a symbolic link, same behaviour than\n                        # os.path.islink().\n                        is_symlink = False\n                    walk_into = not is_symlink\n\n                if walk_into:\n                    walk_dirs.append(entry.path)\n\n    # Yield before recursion if going top down\n    if topdown:\n        yield top, dirs, nondirs\n\n        # Recurse into sub-directories\n        islink, join = path.islink, path.join\n        for dirname in dirs:\n            new_path = join(top, dirname)\n            # Issue #23605: os.path.islink() is used instead of caching\n            # entry.is_symlink() result during the loop on os.scandir() because\n            # the caller can replace the directory entry during the \"yield\"\n            # above.\n            if followlinks or not islink(new_path):\n                yield from _walk(new_path, topdown, onerror, followlinks)\n    else:\n        # Recurse into sub-directories\n        for new_path in walk_dirs:\n            yield from _walk(new_path, topdown, onerror, followlinks)\n        # Yield after recursion if going bottom up\n        yield top, dirs, nondirs\n\n__all__.append(\"walk\")\n\nif {open, stat} <= supports_dir_fd and {scandir, stat} <= supports_fd:\n\n    def fwalk(top=\".\", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        \"\"\"Directory tree generator.\n\n        This behaves exactly like walk(), except that it yields a 4-tuple\n\n            dirpath, dirnames, filenames, dirfd\n\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n\n        The advantage of fwalk() over walk() is that it's safe against symlink\n        races (when follow_symlinks is False).\n\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n\n        Example:\n\n        import os\n        for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n            print(root, \"consumes\", end=\"\")\n            print(sum(os.stat(name, dir_fd=rootfd).st_size for name in files),\n                  end=\"\")\n            print(\"bytes in\", len(files), \"non-directory files\")\n            if 'CVS' in dirs:\n                dirs.remove('CVS')  # don't visit CVS directories\n        \"\"\"\n        sys.audit(\"os.fwalk\", top, topdown, onerror, follow_symlinks, dir_fd)\n        if not isinstance(top, int) or not hasattr(top, '__index__'):\n            top = fspath(top)\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        if not follow_symlinks:\n            orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, isinstance(top, bytes),\n                                  topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n\n    def _fwalk(topfd, toppath, isbytes, topdown, onerror, follow_symlinks):\n        # Note: This uses O(depth of the directory tree) file descriptors: if\n        # necessary, it can be adapted to only require O(1) FDs, see issue\n        # #13734.\n\n        scandir_it = scandir(topfd)\n        dirs = []\n        nondirs = []\n        entries = None if topdown or follow_symlinks else []\n        for entry in scandir_it:\n            name = entry.name\n            if isbytes:\n                name = fsencode(name)\n            try:\n                if entry.is_dir():\n                    dirs.append(name)\n                    if entries is not None:\n                        entries.append(entry)\n                else:\n                    nondirs.append(name)\n            except OSError:\n                try:\n                    # Add dangling symlinks, ignore disappeared files\n                    if entry.is_symlink():\n                        nondirs.append(name)\n                except OSError:\n                    pass\n\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n\n        for name in dirs if entries is None else zip(dirs, entries):\n            try:\n                if not follow_symlinks:\n                    if topdown:\n                        orig_st = stat(name, dir_fd=topfd, follow_symlinks=False)\n                    else:\n                        assert entries is not None\n                        name, entry = name\n                        orig_st = entry.stat(follow_symlinks=False)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except OSError as err:\n                if onerror is not None:\n                    onerror(err)\n                continue\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, isbytes,\n                                      topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n\n    __all__.append(\"fwalk\")\n\ndef execl(file, *args):\n    \"\"\"execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\n\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\n\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\n\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\n\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\n\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\n\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n\n    if path.dirname(file):\n        exec_func(file, *argrest)\n        return\n    saved_exc = None\n    path_list = get_exec_path(env)\n    if name != 'nt':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except (FileNotFoundError, NotADirectoryError) as e:\n            last_exc = e\n        except OSError as e:\n            last_exc = e\n            if saved_exc is None:\n                saved_exc = e\n    if saved_exc is not None:\n        raise saved_exc\n    raise last_exc\n\n\ndef get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n\n    if env is None:\n        env = environ\n\n    # {b'PATH': ...}.get('PATH') and {'PATH': ...}.get(b'PATH') emit a\n    # BytesWarning when using python -b or python -bb: ignore the warning\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", BytesWarning)\n\n        try:\n            path_list = env.get('PATH')\n        except TypeError:\n            path_list = None\n\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b'PATH']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        \"env cannot contain 'PATH' and b'PATH' keys\")\n                path_list = path_listb\n\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\n\n\n# Change environ to automatically call putenv() and unsetenv()\nfrom _collections_abc import MutableMapping, Mapping\n\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self._data = data\n\n    def __getitem__(self, key):\n        try:\n            value = self._data[self.encodekey(key)]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n        return self.decodevalue(value)\n\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        putenv(key, value)\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        encodedkey = self.encodekey(key)\n        unsetenv(encodedkey)\n        try:\n            del self._data[encodedkey]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n\n    def __iter__(self):\n        # list() from dict object is an atomic operation\n        keys = list(self._data)\n        for key in keys:\n            yield self.decodekey(key)\n\n    def __len__(self):\n        return len(self._data)\n\n    def __repr__(self):\n        return 'environ({{{}}})'.format(', '.join(\n            ('{!r}: {!r}'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n\n    def copy(self):\n        return dict(self)\n\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def __or__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        new = dict(self)\n        new.update(other)\n        return new\n\n    def __ror__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        new = dict(other)\n        new.update(self)\n        return new\n\ndef _createenviron():\n    if name == 'nt':\n        # Where Env Var Names Must Be UPPERCASE\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        # Where Env Var Names Can Be Mixed Case\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value.encode(encoding, 'surrogateescape')\n        def decode(value):\n            return value.decode(encoding, 'surrogateescape')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode)\n\n# unicode environ\nenviron = _createenviron()\ndel _createenviron\n\n\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\n\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\n\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes)\n    del _check_bytes\n\n    def getenvb(key, default=None):\n        \"\"\"Get an environment variable, return None if it doesn't exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes.\"\"\"\n        return environb.get(key, default)\n\n    __all__.extend((\"environb\", \"getenvb\"))\n\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    errors = sys.getfilesystemencodeerrors()\n\n    def fsencode(filename):\n        \"\"\"Encode filename (an os.PathLike, bytes, or str) to the filesystem\n        encoding with 'surrogateescape' error handler, return bytes unchanged.\n        On Windows, use 'strict' error handler if the file system encoding is\n        'mbcs' (which is the default encoding).\n        \"\"\"\n        filename = fspath(filename)  # Does type-checking of `filename`.\n        if isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            return filename\n\n    def fsdecode(filename):\n        \"\"\"Decode filename (an os.PathLike, bytes, or str) from the filesystem\n        encoding with 'surrogateescape' error handler, return str unchanged. On\n        Windows, use 'strict' error handler if the file system encoding is\n        'mbcs' (which is the default encoding).\n        \"\"\"\n        filename = fspath(filename)  # Does type-checking of `filename`.\n        if isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            return filename\n\n    return fsencode, fsdecode\n\nfsencode, fsdecode = _fscodec()\ndel _fscodec\n\n# Supply spawn*() (probably only for Unix)\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n\n    __all__.extend([\"P_WAIT\", \"P_NOWAIT\", \"P_NOWAITO\"])\n\n    # XXX Should we support P_DETACH?  I suppose it could fork()**2\n    # and close the std I/O streams.  Also, P_OVERLAY is the same\n    # as execv*()?\n\n    def _spawnvef(mode, file, args, env, func):\n        # Internal helper; func is the exec*() function to use\n        if not isinstance(args, (tuple, list)):\n            raise TypeError('argv must be a tuple or a list')\n        if not args or not args[0]:\n            raise ValueError('argv first element cannot be empty')\n        pid = fork()\n        if not pid:\n            # Child\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            # Parent\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n\n                return waitstatus_to_exitcode(sts)\n\n    def spawnv(mode, file, args):\n        \"\"\"spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execv)\n\n    def spawnve(mode, file, args, env):\n        \"\"\"spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execve)\n\n    # Note: spawnvp[e] isn't currently supported on Windows\n\n    def spawnvp(mode, file, args):\n        \"\"\"spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execvp)\n\n    def spawnvpe(mode, file, args, env):\n        \"\"\"spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execvpe)\n\n\n    __all__.extend([\"spawnv\", \"spawnve\", \"spawnvp\", \"spawnvpe\"])\n\n\nif _exists(\"spawnv\"):\n    # These aren't supplied by the basic Windows code\n    # but can be easily implemented in Python\n\n    def spawnl(mode, file, *args):\n        \"\"\"spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnv(mode, file, args)\n\n    def spawnle(mode, file, *args):\n        \"\"\"spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n\n\n    __all__.extend([\"spawnl\", \"spawnle\"])\n\n\nif _exists(\"spawnvp\"):\n    # At the moment, Windows doesn't implement spawnvp[e],\n    # so it won't have spawnlp[e] either.\n    def spawnlp(mode, file, *args):\n        \"\"\"spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnvp(mode, file, args)\n\n    def spawnlpe(mode, file, *args):\n        \"\"\"spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n\n\n    __all__.extend([\"spawnlp\", \"spawnlpe\"])\n\n\n# Supply os.popen()\ndef popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\n\n# Helper for popen() -- a proxy for a file whose close waits for the process\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\n\n# Supply os.fdopen()\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n\n\n# For testing purposes, make sure the function is available when the C\n# implementation exists.\ndef _fspath(path):\n    \"\"\"Return the path representation of a path-like object.\n\n    If str or bytes is passed in, it is returned unchanged. Otherwise the\n    os.PathLike interface is used to get the path representation. If the\n    path representation is not str or bytes, TypeError is raised. If the\n    provided path is not str, bytes, or os.PathLike, TypeError is raised.\n    \"\"\"\n    if isinstance(path, (str, bytes)):\n        return path\n\n    # Work from the object's type to match method resolution of other magic\n    # methods.\n    path_type = type(path)\n    try:\n        path_repr = path_type.__fspath__(path)\n    except AttributeError:\n        if hasattr(path_type, '__fspath__'):\n            raise\n        else:\n            raise TypeError(\"expected str, bytes or os.PathLike object, \"\n                            \"not \" + path_type.__name__)\n    if isinstance(path_repr, (str, bytes)):\n        return path_repr\n    else:\n        raise TypeError(\"expected {}.__fspath__() to return str or bytes, \"\n                        \"not {}\".format(path_type.__name__,\n                                        type(path_repr).__name__))\n\n# If there is no C implementation, make the pure Python version the\n# implementation as transparently as possible.\nif not _exists('fspath'):\n    fspath = _fspath\n    fspath.__name__ = \"fspath\"\n\n\nclass PathLike(abc.ABC):\n\n    \"\"\"Abstract base class for implementing the file system path protocol.\"\"\"\n\n    @abc.abstractmethod\n    def __fspath__(self):\n        \"\"\"Return the file system path representation of the object.\"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        if cls is PathLike:\n            return _check_methods(subclass, '__fspath__')\n        return NotImplemented\n\n    __class_getitem__ = classmethod(GenericAlias)\n\n\nif name == 'nt':\n    class _AddedDllDirectory:\n        def __init__(self, path, cookie, remove_dll_directory):\n            self.path = path\n            self._cookie = cookie\n            self._remove_dll_directory = remove_dll_directory\n        def close(self):\n            self._remove_dll_directory(self._cookie)\n            self.path = None\n        def __enter__(self):\n            return self\n        def __exit__(self, *args):\n            self.close()\n        def __repr__(self):\n            if self.path:\n                return \"<AddedDllDirectory({!r})>\".format(self.path)\n            return \"<AddedDllDirectory()>\"\n\n    def add_dll_directory(path):\n        \"\"\"Add a path to the DLL search path.\n\n        This search path is used when resolving dependencies for imported\n        extension modules (the module itself is resolved through sys.path),\n        and also by ctypes.\n\n        Remove the directory by calling close() on the returned object or\n        using it in a with statement.\n        \"\"\"\n        import nt\n        cookie = nt._add_dll_directory(path)\n        return _AddedDllDirectory(\n            path,\n            cookie,\n            nt._remove_dll_directory\n        )\n\n\n_system = system\n\ndef system(cmd):\n    try:\n        return _system(cmd)\n    except SystemError as e:\n        if not isinstance(getattr(e, '__cause__', None), NotImplementedError):\n            raise\n        import subprocess\n        return subprocess.run(cmd, shell=True, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr).returncode\n", 1128], "reference/median_ref.py": ["def median(a, b, c):\n    return sorted([a, b, c])[1]\n", 2], "/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py": ["import importlib.util\nimport os\nfrom viztracer import VizTracer\nfrom tests.test_cases import test_inputs\n\ndef run_trace(module_path, func_name, trace_path):\n    spec = importlib.util.spec_from_file_location(\"mod\", module_path)\n    mod = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(mod)\n    tracer = VizTracer(output_file=trace_path)\n    tracer.start()\n    for args in test_inputs:\n        getattr(mod, func_name)(*args)\n    tracer.stop()\n    tracer.save()\n\nif __name__ == \"__main__\":\n    os.makedirs(\"traces\", exist_ok=True)\n\n    run_trace(\"reference/median_ref.py\", \"median\", \"traces/trace_ref.json\")\n    run_trace(\"patches/median_bug1.py\", \"median\", \"traces/trace_bug1.json\")\n", 21]}, "functions": {"<module> (/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/tests/test_cases.py:1)": ["/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/tests/test_cases.py", 1], "_get_sep (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py:41)": ["/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py", 41], "split (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py:100)": ["/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/posixpath.py", 100], "isdir (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/genericpath.py:39)": ["/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/genericpath.py", 39], "makedirs (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/os.py:200)": ["/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/os.py", 200], "<module> (reference/median_ref.py:1)": ["reference/median_ref.py", 1], "run_trace (/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py:6)": ["/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py", 6], "<module> (/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py:1)": ["/Users/tarananaznin/eclipse-workspace/python/FinalDemo/test/patch_trace_analyzer/main.py", 1]}}}